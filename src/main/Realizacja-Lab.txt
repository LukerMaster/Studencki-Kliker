L1 Stosowanie konstrukcyjnych wzorców projektowych
- Singleton - Main.java - inventory, world, stringsProvider
- Factory Method - CookieSpawnActionWrapper.java
- Abstract Factory - IDashboardFactory.java oraz implementacje
- Builder - GeneratorBuilder.java
- Prototype - HopsBush.java

L2 Stosowanie strukturalnych wzorców projektowych
- Facade - StringsProvider.java
- Decorator - ObservableInventory.java
- Adapter - GeneratorToStringAdapter.java
- Bridge - StandardGenerator.java - Trzyma odniesienia do swoich podkomponentów. Scrapping component jest oddzielny. MadeOutOfComponent jest oddzielny.
- Flyweight - StringProvider.java - Każde miejsce które potrzebuje tłumaczeń ma odniesienie do jednego kontenera na tłumaczenia
- Composite - CookieSpawning package

L3 Stosowanie czynnościowych wzorców projektowych
- Strategy - IGeneration.java -> PeriodicAction.java
- Command - ICustomUserAction.java
- Observer - ObservableInventory.java
- Iterator - AvailableActionsFactory.java
- Proxy - InventoryWithHoles.java
- Memento - SaveBasedWorldFactory.java - Zapisywanie całej gry do pliku za pomocą interfejsu Serializable
- Template - StandardGenerator.java - Wszystkie generatory korzystają z już skończonej implementacji tej klasy
- Interpreter - TODO
- Mediator - TODO
- State - Generators.States package, PeriodicAction.java
- Visitor - BuildingActions package, BuildingVisitor.java

L4 Stosowanie zasad pojedynczej odpowiedzialności i otwarte-zamknięte
- Jeśli nigdzie się nie pomyliłem, to każda klasa ma tylko jedno zadanie.
- Jest dużo klas, które JEST kilkoma rzeczami naraz (Generatory), ale nadal wykonują tylko JEDNĄ rzecz (zgodne z SRP).

L5 Stosowanie zasad podstawiania Liskov, odwracania zależności i segregacji interfejsów
- Każda klasa tylko przyjmuje swoje zależności. Nic nie jest tworzone losowo w środku czegoś innego (poza fabrykami!), co jest zgodne z jej wzorcem projektowym.
- Każda klasa używa tylko interfejsów do dostawania się do innych obiektów. Jeśli nigdzie nie ma pomyłki, to nie ma ani jednego pola "final" odwołującego się do klasy.

L6 Zastosowanie zasad czystego kodu w programowaniu
- Najbrzydszą (moim zdaniem) klasą tutaj jest swingowe "GeneratorBuyMenuFactory". Jeśli ona jest ładna, to chyba jest git.

L7 Zastosowanie programowania funkcyjnego
- Sporo lambd jest używanych, głównie do dodawania listenerów dla przycisków.
- Generalnie raczej tam, gdzie Observer pattern, tam i lambda się znajdzie.

L8 Zastosowanie programowania aspektowego
- Jest napisany jeden aspekt do logowania, aczkolwiek trochę załamałem ręce jak okazało się, że AspectJ nie za bardzo może zostać użyty sam, w zwykłej aplikacji. Jeśli da się bez tego dostać 5.0, to wolałbym używania AOP uniknąć.
- Plus jest taki, że sporo się trzeba było oczytać, żeby doprowadzić aspekty do jakiegokolwiek działania - powiem tak - założenie jest bardzo fajne, ale moim zdaniem dekorator - pomimo, że bardziej kodochłonny i czasochłonny - jest o wiele bardziej elegancki i wygodny.

L9 Refactoring kodu programu
- Wystarczy zajrzeć na githuba, ten projekt miał pare rewolucji konceptualnych.

L10 Stosowanie testów w wytwarzaniu oprogramowania
- Dodanych jest kilka prostych testów do sprawdzania poprawności działania niektórych bardziej skomplikowanych klas
- Dodanych jest kilka testów prostych, celem demonstracji działania testów ogólnie
- Użyte zostało Mockowanie dla prostrzej separacji zależności
